#updateConfigFile()
#{

# embedded function, i.e. has to included by source or '.'

# note that such embedded functionality replaces positional parameters
# by thos which are passed. If none are passed, then the positional parameters
# of the calling instance are used.

# For the passing of parameters from the calling instance here,
# a parameter ARG: is prefixed if the parameter could be empty

  # return 1 if a single parameter was passed whose value is 'disable'

  # find the corresponding section in the config file
  test ! -f ${CONFIG_FILE} && touch $CONFIG_FILE

  # adjust for spaces a user may have edited into the section

  if [ ! "${uCF_str}" ] ; then
    uCF_blkBeg=0
    uCF_num=0

    while read line ; do
      uCF_num=$((uCF_num + 1))

      test "${uCF_is}" -a ! "${line}" && break

      if [ "${line}" = ${QA_SRC}: ] ; then
        uCF_is=t
        uCF_blkBeg=$uCF_num
        uCF_str=${QA_SRC}:
        continue
      fi

      if [ ${uCF_is} ] ; then
        line=${line// /}

        while [ ${line/==/=} != ${line} ] ; do
          line=${line/==/=}
        done

        uCF_str="${uCF_str} ${line}"
      fi
    done < ${CONFIG_FILE}

    uCF_blkEnd=$uCF_num
  fi

  sctn=( ${uCF_str} )

  # append a new section
  if [ ${uCF_blkBeg:-0} -eq 0 ] ; then
    echo -e "\n${QA_SRC}:"        >> $CONFIG_FILE
    echo AUTO_UPDATE=enabled       >> $CONFIG_FILE
    echo AUTO_TABLE_UPDATE=enabled >> $CONFIG_FILE
  fi

  # check items
  item=$1
  name=${item%=*}
  value=${item#*=}

  if [ ${value:0:7} = disable ] ; then
    item=${name}=d
  elif [ ${value} = ${name} ] ; then
    value=
  fi

  for(( i=0 ; i < ${#sctn[*]} ; ++i )) ; do
    sctn_val=${sctn[i]#*=}

    if [ ${sctn[i]%=*} = ${name} ] ; then
      uCF_num=$((uCF_blkBeg+i))

      if [ ${sctn[i]} = ${item} ] ; then
        if [ "${sctn_val}" = enabled ] ; then
          return 0
        else
          return 1
        fi
      elif [ "${value}" = d ] ; then
        sed -i "${uCF_num} d" $CONFIG_FILE &> /dev/null
        return 1
      elif [ "${value}" ] ; then
        sed -i "${uCF_num} c${item}" $CONFIG_FILE &> /dev/null
        return 0
      else
        eval ${sctn[i]}  # assign config file value
        return 0
      fi
    fi
  done

  # not defined
  test ! "${value}" && return 1

  # new
  sed -i "$((uCF_blkEnd)) a${item}" $CONFIG_FILE &> /dev/null

  return 0
#}
