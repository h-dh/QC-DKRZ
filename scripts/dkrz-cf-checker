#! /bin/bash

descript()
{
  echo -e "\nUsage: dkrz-cf-checker [opts] netCDF-file[s]"
  echo "Purpose: Check for CF Conventions Compliance (http://cfconventions.org)."
  echo "The checker is part of the QA-DKRZ package in"
  echo "https://github.com/IS-ENES-Data/QA-DKRZ.git"
  echo "Compilation: '/your-path-to-QA-DKRZ/install CF' unless"
  echo "it was fetched by conda install -c birdhouse qa-dkrz,"
  echo "Email: hollweg@dkrz.de"
  echo " -C str     CF Convention string; taken from global attributes by default."
  echo " -F path    Find recursively all nc-files from starting point 'path'."
  echo " -p str     Path to one or more netCDF Files; this is prefixed"
  echo "            only to netCDF-files without any path component."
  echo " -R         Apply also recommendations given by CF conventions."
  echo " --debug    Show execution commands."
  echo " --help"
  echo " --param    Only for program development."
  echo " --ts[=arg] Run the files provided in the Test-Suite for CF conventions"
  echo "            rules in QA-DKRZ/CF_TestSuite. If particular netCDF files are"
  echo "            provided additionally, then only these are used. If a filename"
  echo "            cannot be resolved unambigously, then use optional arg F[ail] or P[ass}."
  echo " netCDF-file(s)"

  exit
}

getSrcPath()
{
  # extract the path to the root of the QA package

  # is it in a conda built?
  local x_conda=${0%/qa-dkrz}
  if [ ${x_conda##*/} = bin ] ; then
    x_conda=${x_conda%/bin}
    if [ -d $x_conda/opt/qa-dkrz ] ; then
       CONDA_ENV=t
       export QA_SRC=$x_conda/opt/qa-dkrz
       return
    fi
  fi

  local target isInvalid

  if [ ${1:0:1} = '/' ] ; then
    target=$1
  else
    target=$(pwd)/$1
  fi

  if [ -h $target ] ; then

    # get the link
    local link=$(ls -l $target | awk  '{print $(NF)}')

    # link is relative, so make it absolute
    test ${link:0:1} != '/' && link=${target%/*}/${link}

    getSrcPath ${link}

  elif [ -f $target ] ; then

    # a real instance, at first resolve .. and .
    # works also for . or .. in the middle of the path

    local xname=${target##*/}
    target=${target%/*}  # remove the name of the script

    local arr=( ${target//\// } )

    local i j sz
    sz=${#arr[*]}

    for(( i=1 ; i < sz ; ++i )) ; do

      if [ "${arr[i]}" = '.' ] ; then
        unset arr[i]
      elif [ "${arr[i]}" = '..' ] ; then
        j=$((i-1))

        # this takes into account adjacent . and/or .. with any depth
        while [ ${#arr[j]} -eq 0 ] ; do
          j=$((j-1))
        done
        unset arr[j]
        unset arr[i]
      fi
    done

    # get rid of empty items
    arr=( ${arr[*]} )

    sz=${#arr[*]}

    local tmp
    for(( i=0 ; i < sz ; ++i )) ; do
      tmp=${tmp}/${arr[i]}

      if [ -f ${tmp}/.install_configure ] ; then
        QA_SRC=$tmp
        break
      fi
    done

    test $i -eq $sz && isInvalid=t
  else
    isInvalid=t
  fi

  if [ ${isInvalid:-f} = t ] ; then

    local str=$(ls -l $target 2> /dev/null | awk  '{print $(NF)}')

    if [ ${#str} -gt 0 ] ; then
      str="invalid path=$0"
    else
      str="broken path=$0"
    fi

    echo "${str}"

    exit 1
  fi

  export QA_SRC=${QA_SRC}

  return
}

# -------  main -----
test $# -eq 0 && descript

# get execution path of QA scripts

while getopts C:F:hp:R-: option ${args[*]}
do
  case $option in
    C)  CF=${OPTARG} ;;
    F)  startingDir=$OPTARG ;;
    h)  descript ;;
    p)  fPath=${OPTARG} ;;
    R)  RC=t ;;
    -)  if [ "$OPTARG" = "help" ] ; then
          descript
        elif [ "${OPTARG}" = "debug" ] ; then
          set -x
        elif [ "${OPTARG}" = "param" ] ; then
          isParamFileOnly=t
        elif [ "${OPTARG}" = "test-suite" ] ; then
          isTestSuite=t
        elif [ "${OPTARG%=*}" = "ts" ] ; then
          if [ "${OPTARG%=*}" != "${OPTARG}" ] ; then
            arg=${OPTARG#*=}
            if [ ${arg[0]} = p -o ${arg[0]} = P ] ; then
              tsCase=/Pass
            else
              tsCase=/Fail
            fi
          fi
          isTestSuite=t
        fi
        ;;
   \?)  descript
  esac
done

shift $(( $OPTIND - 1 ))

getSrcPath $0  # sets QA_SRC and if required CONDA_ENV

test ! $CONDA_ENV &&
  $QA_SRC/install CF &> /dev/null

QA_WORK=$QA_SRC

# files
fs=( $* )

if [ ${isTestSuite:-f} = t ] ; then
  # generate the netcdf files
  count=$(find $QA_SRC/CF-TestSuite/Nc -name "*.nc" 2> /dev/null | grep -c .)
  if [ ${count} -lt 25 ] ; then  # sufficient to outnumber protected nc-files
    if [ ! -f $QA_SRC/CF-TestSuite/Txt ] ; then
      if [ -f $QA_SRC/CF-TestSuite/Txt.tar.bz2 ] ; then
        tar -C   ${QA_WORK}/CF-TestSuite \
            -xjf ${QA_SRC}/CF-TestSuite/Txt.tar.bz2
      else
        echo "$QA_SRC/CF-TestSuite/Txt no such directory"
        exit 1
      fi
    fi

    if [ -d $QA_SRC/CF-TestSuite/Txt ] ; then
      $QA_SRC/CF-TestSuite/scripts/mkAllNc > /dev/null
    else
      echo "$QA_SRC/CF-TestSuite/Txt no such directory"
      exit 1
    fi
  fi

  startingDir=$QA_SRC/CF-TestSuite/Nc${tsCase}

  if [ ${#startingDir} -gt 0 ] ; then
    ts_fs=( $( find ${startingDir} -name "*.cn" ) )
    ts_fs=( ${ts_fs[*]} $( find ${startingDir} -name "*.nc" | sort ) )
  fi

  unset startingDir
fi

# not for the test suite
if [ ${#startingDir} -gt 0 ] ; then
  fs=( ${fs[*]} $( find ${startingDir} -name "*.cn" ) )
  fs=( ${fs[*]} $( find ${startingDir} -name "*.nc" | sort ) )
fi

param_T="\\n-t ${QA_SRC}/tables/projects/CF"

param_IN="\\nIN::oCF"

param_CF="\\nCF::cFSN=cf-standard-name-table.xml"
param_CF="${param_CF}:cFAT=CF_area-type-table.txt"
param_CF="${param_CF}:cFSRN=CF_standardized-region-names.txt"
param_CF="${param_CF}${CF:+:cF=}${CF}${RC:+:fR}"

param_X="${param_X}\\nX::cL=CF_check-list.conf:nCR:nLL=L1:oP:d"
#param_X="${param_X}:note={CF_12h,D}"  # data variable without any data


if [ ${isParamFileOnly:-f} = f ] ; then
  echo -e "\n========================================"
  echo -e "\nDKRZ-CF-Checker run ($(date +'%F %T')):"
fi

for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
  f=${fs[i]}

  param=

  # prepare parameters for the cf-checker.x
  if [ ! "${fPath}" -a ${f/\//} != ${f} ] ; then
     fPath=${f%/*}
     f=${f##*/}
  fi

  # only selected ones from the set of test files
  if [ ${#ts_fs[*]} -gt 0 ] ; then
    for(( i_ts=0 ; i_ts < ${#ts_fs[*]} ; ++i_ts )) ; do
      if [ ${f} = ${ts_fs[i_ts]##*/} ] ; then
        test ! "$fPath" && fPath=${ts_fs[i_ts]%/*}
        break
      fi
    done
    test ${i_ts} -eq ${#ts_fs[*]} && continue
  fi

  if [ "$fPath" ] ; then
    param="-p ${fPath}\\n"
  else
    echo "Please, provide a path with optn -p"
    exit 1
  fi

  param="${param}-f $f"
  param="${param}${param_T}"
  param="${param}${param_IN}"
  param="${param}${param_CF}"

  param="${param}${param_X}:note="
  if [ ${isTestSuite:-f} = t ] ; then
    if [ ${f##*/} != cf_0f.nc ] ; then
      param="${param},{CF_0d,D},{CF_0e,D},{CF_0f,D},{CF_12e,D}"
    fi
  fi

  if [ ${isParamFileOnly:-f} = t ] ; then
    echo -e "$param" > param_file.txt
    exit
  fi

  param="$(echo -e $param)"
  $QA_SRC/bin/dkrz-cf-checker.x ${param}
  retVal=$?

  if [ ${isTestSuite:-f} = t ] && echo $f | grep -q Fail ; then
    asdf="$(ncdump -h $f | grep :comment[^[:digit:]])"
    echo "${asdf#*:}"
#    asdf="$(ncdump -h $f | grep :note)"
#    test "${asdf}" && echo -e "${asdf#*:}"
    echo -e "\n"
  fi
done

echo "========================================"

test -e param_file_$$.txt && \rm param_file_$$.txt

exit $retVal
