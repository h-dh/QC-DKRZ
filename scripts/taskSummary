#! /bin/bash

##/*! \file taskSummary.h
## \brief Summary of all processed variables of a given experiment

## Annotations in QA_RESULTS/check_logs/Annotations/experiment are explored.
##*/

# names of the directories
annotations=Annotations
period=Period
summary=Summary

descript()
{
  echo -e "\nUsage: QA/scripts/taskSummary opts list-of-experiments"
  echo "purpose: extract annotations from a logfile,"
  echo "         output a comprehensive summary and an outline."
  echo "  -e addr   Email address for sending the outline."
  echo "  -P name   Project name."
  echo "  -p path   Path to check_logs by default current working directory."
  echo "  -r path   Path to QA_Results, inclusively."
  echo "  -t path   Path to the check_list table."
  echo "  --debug[=script]"
  echo "  --help"
}

blk2Files()
{
  # same header for the current entry of each file
  word=( ${blk[iP]} )
#  str0="\n - annotation:"
#  str0="${str0}\n   path: ${word[1]}"
  str0="\n   path: ${word[1]}"

  if [ "${iX}" -gt -1 ] ; then
    str0="${str0}\n   experiment:"
    iX=$((iX + 1))

    # add the list of experiments
    while [ ${iX} -gt -1 ] ; do
      word=( ${blk[iX]} )

      if [ ${word[0]} = '-' ] ; then
        str0="${str0}\n     ${word[1]}"
        iX=$((iX + 1))
      else
        iX=-1
        str0="${str0}\n"
      fi
    done
  fi

  if [ "${iV}" -gt -1 ] ; then
    str0="${str0}\n   variable:"
    iV=$((iV + 1))

    # add the list of variables
    while [ ${iV} -gt -1 ] ; do
      word=( ${blk[iV]} )

      if [ ${word[0]} = '-' ] ; then
        str0="${str0}\n     ${word[1]}"
        iV=$((iV + 1))
      else
        iV=-1
        str0="${str0}\n"
      fi
    done
  fi

  if [ "${iF}" -gt -1 ] ; then
    # note: the same for file: and atomic:
    word=( ${blk[iF]} )
    str0="${str0}\n   file: ${word[1]}"
  fi

  # a sorted array is required below
  tags=( $( echo -e ${tags[*]/%\\n} | sort) )
  tags_ix=( ${tags[*]#*|} )
  tags=( ${tags[*]%|*} )

  prev_tag=
  N=${#tags_ix[*]}

  for(( j=0 ; j < N ; ++j )) ; do
    ix=${tags_ix[j]}

    # strip embracing '
    tag=${tags[j]}

    word=( ${blk[$((ix-1))]} )
    impact=${word[1]}

    # switch to a another output file
    if [ "${prev_tag}" != $tag ] ; then
      # flush before the switch
      test "${str:0:1}" && echo -e "${str}" >> $outT

      outT=$summary/$exp/${impact}-${tag}
#      test ! -e $outT && echo -e "--- # Annotations (${tag})\n" > $outT

      prev_tag=$tag
      str="${str0}" # \n   events:"
    fi

    str="${str}\n   annotation:"
    str="${str}\n     caption: ${blk[$((ix-2))]:9}"
    str="${str}\n     impact: ${impact}"
    str="${str}\n     tag: '${tag}'"
  done

  unset blk
  tags=()
  tags_ix=()
  iP=-1
  iV=-1
  iF=-1
  iX=-1

  return
}

period()
{
  # determine periods checked so far.

  local txt
  local f fc tok
  declare -a fc

  test ! -e $exp.log && return

  prg=${QA_SRC}/scripts/xtractTimeRange_from_log

  test ${#prg} -gt 0 && \
    /bin/bash ${prg} ${DEBUG_X} -P ${PROJECT} -Q $exp.log

  return
}

processBlk()
{
   if [ ${#failB} -gt 0 ] ; then
      failB="  ${failB}"
   else
      failB="      "
   fi

   if [ ${#fName} -gt 0 ] ; then
     space=
     for(( len=${#fName} ; len < ${max_len} ; ++len )) ; do
       space="${space} "
     done
     echo "${fName}${space}${failB}${begin} - ${end}${failE}" >> $outP
   fi

   fName=
   failB=
   failE=
   begin=
   end=
}

summaryHR()
{
  local aIn=$annotations/${exp}.note

  txt="Annotation summary of QA-DKRZ: $(date +'%F %T') \n"
  txt="${txt}\nExperiment: ${exp}"
  txt="${txt}\nPath to the annotations in YAML format: $(pwd)/${aIn}"

  mkdir -p $summary/$exp

  # create a comprehensive summary
  outA=$summary/$exp/annotations.txt
  echo -e ${txt} > $outA

  # convert periods to human readers
  local countL line max_len len space

  if [ -e $period/${exp}.period ] ; then
    # find the longest name
    local max_len=0
    declare -a line

    while read -a line ; do
      if [ "${line[1]}" = variable: -a ${#line[2]} -gt ${max_len} ] ; then
        max_len=${#line[2]}
      fi
    done < $period/${exp}.period

    outP=$summary/$exp/periods.txt
    echo -n '' > $outP

    exec 9<&0
    exec 0< $period/${exp}.period

    # skip 1st and 2nd line
    read -a line
    read -a line

    local fName begin end failB failE

    while read -a line ; do
      if [ "${line[1]}" = 'frequency:' ] ; then
        test ${#fName} -gt 0 && processBlk

        echo -e -n "\nFrequency: ${line[2]}, " >> $outP
        read -a line
        echo Number of variables: ${line[1]} >> $outP
      elif [ "${line[1]}" = 'variable:' ] ; then
        # process a blk
        processBlk
        fName=${line[2]}
      elif [ ${line[0]} = 'begin:' ] ; then
        begin=${line[1]}
      elif [ ${line[0]} = 'end:' ] ; then
        end=${line[1]}
      elif [ ${line[0]} = 'status:' ] ; then
        test ${line[1]:0:6} = "FAIL:B" && failB="--> "
        test ${line[1]} = "FAIL:E" -o ${line[1]} = "FAIL:BE" && failE=" <--"
      fi
    done

    # the last entry
    if [ ${#fName} -gt 0 ] ; then
      # process a blk
      processBlk
    fi

    # find var-freq cases of the CORE entity not delivered
    if [ "${PROJECT}" = CORDEX ] ; then
      if ! expr match "$exp" '.*r0i0p0' &> /dev/null ; then
        if [ ${#std_table} -gt 0 ] ; then
          /bin/bash ${QA_SRC}/scripts/findNotDelivered ${DEBUG_X} \
          --project=CORDEX \
          --period=$outP \
          --table=${std_table} \
          --out=$outA \
          --yaml
        fi
      fi
    fi

    if [ -e $outP ] ; then
      if grep -q -- '--' $outP 2> /dev/null ; then
        echo -e " \n\n==== Failed Time Range =========================\n" \
                >> $outA

        while read line ; do
          test "${line/--/}" != "${line}" && echo "${line}" >> $outA
        done < $outP
        echo -e "\n"  >> $outA
      fi

      mv  $outP $summary/$exp/time_range.txt
    fi
  fi

  # find tags of the yaml annotation file, if any
  if [ ! -f $aIn ] ; then
    echo -e " \n\n==== Annotation: none =========================\n" \
              >> $outA
    return
  fi

  # clear old results
  \rm -f $summary/$exp/L*
  local str str0
  local capt impact path
  local i ix j iP iV iX iF N
  local tag prev_tag tag_ix tags word
  declare -a word
  declare -a tags
  declare -a tags_ix

  iP=-1
  iV=-1
  iF=-1
  iX=-1

  exec 0< ${aIn}

  while read line ; do
    test "${line:0:1}" = '-' -a "${line:0:7}" = '- date:' && break
  done

  # generate a file for each tag
  while read line ; do
    if [ "${line:0:7}" = '- date:' ] ; then
      # the end of a block
      blk2Files
    fi

    # indices
    i=${#blk[*]}
    if [ "${line:0:11}" = experiment: ] ; then
      test ${iX} -eq -1 && iX=$i  # only the first occurrence
    elif [ "${line:0:9}" = variable: ] ; then
      iV=$i
    elif [ "${line:0:5}" = file: ] ; then
      iF=$i
    elif [ "${line:0:10}" = data_path: ] ; then
      iP=$i
    elif [ "${line:0:4}" = tag: ] ; then
      # find all tags within the current block; note that the index is appended
      word=( ${line} )
      tag=${word[1]//\'}
      tags[${#tags[*]}]="${tag}|$i"
    fi

    blk[${#blk[*]}]="$line"
  done

  # the last one is still missing
  blk2Files

  # there is still one remaining
  test "${str:0:1}" && echo -e "${str}" >> $outT

  local f fc
  fc=( $( ls $summary/$exp/L* 2> /dev/null ) )

  for f in ${fc[*]} ; do
    echo -e " \n\n==== Annotation: ${f##*/} =========================\n" \
           >> $outA
    cat $f >> $outA
  done

  test ${EMAIL:-f} = f && return

  local caption="QA-DKRZ: ${exp}"

  if which mutt &> /dev/null ; then
    mutt -s "${caption}" -a ${outA} ${EMAIL[*]} << EOF
$( echo "${caption}" )
EOF

  elif which mailx &> /dev/null ; then

    mailx -s "${caption}" ${EMAIL[*]} << EOF
$( cat ${outA} )
EOF

  fi

  # restore stdin and free #9
  exec 0<&9 9<&-

  return
}

summaryY()
{
  # Build the summary files (notes and period)
  # and submit to task recipients

  # Note: xtractNotes eliminates the former entries of duplicates.

  local txt
  local f fc tok
  declare -a fc

  # build summary for each experiment

  test ! -e $exp.log && return

  /bin/bash ${QA_SRC}/scripts/xtractNotes_from_log ${DEBUG_X} ${MERGE} -H $exp.log

  return
}

##//! Entry to this script

##main()
##{
######## main ############

# QA_SRC was exported

  QA_RESULTS=QA_RESULTS # by default
  PROJECT='unkown_project'

  while getopts e:m:P:p:r:s:t:-: option ${args[*]}
  do
    case $option in
      e)  EMAIL=( ${OPTARG//,/ } ) ;;
      m)  MERGE="-m ${OPTARG}" ;;
      P)  PROJECT=${OPTARG} ;;
      p)  cd ${OPTARG} ;;
      r)  QA_RESULTS=${OPTARG} ;;
      s)  std_table=${OPTARG} ;;
      t)  test -e ${OPTARG} -a ! -d ${OPTARG} && cl_table=${OPTARG} ;;
      -)  if [ "${OPTARG:0:3}" = src ] ; then
            QA_SRC=${OPTARG##*=}
          elif [ "$OPTARG" = help ] ; then
            descript
            exit
          elif [ "${OPTARG%%=*}" = debug ] ; then
            DEBUG_X="--${OPTARG}"
            this=${0##*/}
            test "${OPTARG}" = debug -o ${OPTARG##*=} = ${this} && set -x
          fi
          ;;
     \?)  descript
          exit ;;
    esac
  done

  shift $(( $OPTIND - 1 ))

  if [ $# -eq 0 ] ; then
    descript
    exit
  fi

  EXP_NAMES=( $* )
  EXP_NAMES=( ${EXP_NAMES[*]%.log} )

  for exp in ${EXP_NAMES[*]} ; do
    # determination of periods has to come first; any period
    # ambiguity will be annotated
    period

    # yaml annotations are sorted corresponding to the flag;
    # output in $annotation/EXP_NAME/annotation_summary.txt.
    summaryY

    # summary of annotations for humann readers.
    summaryHR
  done

  # when there was no annotation
  rmdir $annotations &> /dev/null

##}
