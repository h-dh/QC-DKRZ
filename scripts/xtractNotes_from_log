#! /bin/bash

descript()
{
  echo -e "\nxtractNotes_from_log:"
  echo "purpose: extract notes from a logfile"
  echo "  Exclusive options:"
  echo "  -c       Clear file from redundant entries and exit."
  echo "           Note: a clearance is always done"
  echo "  -d dir   stdout directory; default: [file-path/]Annotations"
  echo "  -f str   Comma-sep-list of notes [default: all]"
  echo "  -g expr  Grep blocks containing expr (comma-sep-list)."
  echo "  -H       Output original header of input file."
  echo "  -h       Help."
  echo "  -i       Output the inverse; only with option -g or -r."
  echo "  -m       Merge QA results (automaticly in ONLY_SUMMARY mode)."
  echo "  -p       Print to output."
  echo "  -r expr  Remove blocks; equivalent to"
  echo "           -i -g expr -Q > same_File"
  echo "  -t str   Comma-sep-list of 'name,ensemble' pairs"
  echo "           where 'ensemble' may be omitted."
  echo "           for a default and for particular files."
  echo "  --debug[=script]"
  echo "  --line=i only search the i-th line of each block."
  echo "  f(s)  these logfs (bash: *, ? allowed)"
  exit
}

atomise()
{
  # fBase: plain array
  # atomicTags:  comma-sep groups of tags;
  #              a group is separated by /
  #              each tag has the sh1sum of the caption appended
  # atomicEnd:   end time

  findExpFamily expFamily atomicBase[*]

  # the atomicBase names are grouped coorresponding to tags
  findPureAtomic

  exec 1> $atom
  echo -n ''

  exec 0< $annot

  printAnnotations

  unset atomicTags # no longer needed

  return
}

atomicParsing_blk()
{
  local isSoundBlk=$1

  local IFS=${oldIFS}

  local words
  declare -a words

  local sz=${#blk[*]}
  local ix=-1
  local fBase range
  local i j k tag capt

  declare -a tag

  # the first line is always ' - date: ...'
  for(( i=1 ; i < sz ; ++i )) ; do
    words=( ${blk[i]} )

    if [ "${words[0]}" = file: ] ; then
      words[1]=${words[1]%.nc}

      if range=$(expr match "${words[1]}" \
                    '.*_\([[:digit:]]\+-[[:digit:]]\+\)' 2> /dev/null ) ; then
        fBase=${words[1]%_${range}}
      elif range=$(expr match "${words[1]}" \
                    '.*_\([[:digit:]]\+\)' 2> /dev/null ) ; then
        fBase=${words[1]%_${range}}
      else
        fBase=${words[1]%.*}
      fi

      for(( ix=0 ; ix < ${#atomicBase[*]} ; ++ix )) ; do
        test ${atomicBase[ix]} = $fBase && break
      done

      if [ ${ix} -eq ${#atomicBase[*]} ] ; then
        atomicBase[ix]=$fBase
        atomicEnd[ix]=$(grep -A 10 "file: $fBase" $annot \
                        | grep 'end:' | awk 'END{print $NF}' )
      fi

      test $isSoundBlk = t && break

      # skip a few lines
      for(( i=i+1 ; i < sz ; ++i )) ; do
        words=( ${blk[i]} )
        test "${words[0]:0:2}" = 'ev' && break  # events:
      done
    elif [ "${words[0]}" = tag: ] ; then
      local varTag
      getVarTag varTag $i

      # reduce sha1 length to a unique minimum
      k=5
      local pref=${varTag%%=*}
      varTag=${varTag#*=}
      for(( j=i+1 ; j < ${#tag[*]} ; ++j )) ; do
        while [ ${tag[j]} = ${varTag:0:k} ] ; do
          k=$((k+1))
        done
      done
      tag[${#tag[*]}]=${pref}=${varTag:0:k}
    fi
  done

  if [ ${ix} -gt -1 ] ; then
    atomicTags[ix]=${atomicTags[ix]}${atomicTags[ix]:+,}${tag[0]}
    for(( j=1 ; j < ${#tag[*]} ; ++j )) ; do
      atomicTags[ix]=${atomicTags[ix]}/${tag[j]}
    done
  fi

  return
}

checkSolvedGroupTags()
{
  # return 1 if a group-tag had previously been processed
  local xtag=$1
  local g=$2
  local N=$3

  # a) tag is in the list of grouped tags
  local i jg j k gTags tag
  declare -a gTags

# N and ig are defined in outer scope for groups
  local gN nTags len

  gTags=( ${grpPAT[g]//,/ } )
  gN=${#gTags[*]}
  local isGT=f

  for(( i=g ; i < N ; ++i )) ; do
    for(( jg=0 ; jg < gN ; ++jg )) ; do
      len=${#gTags[jg]}
      tag=${xtag:0:len}
      if [ $tag = ${gTags[jg]} ] ; then
        isGT=t
        break 2
      fi
    done
  done

  test $isGT = f && return 1  # curr tag wasn't in the groups

  # b) tag is in the list of solved tags
  for(( i=0 ; i < ${#solvedPAT[*]} ; ++i )) ; do
    gTags=( ${solvedPAT[i]//,/ } )

    for(( j=0 ; j < ${#gTags[*]} ; ++j )) ; do
      if [ $tag = ${gTags[j]} ] ; then
        event_ix[ev_ix]=
        return 0
      fi
    done
  done

  event_ix[ev_ix]=

  # shift tag from grpPAT to solvedPAT
  solvedPAT[g]=${solvedPAT[g]}${solvedPAT[g]:+,}$tag

  # tag is in a group, which is processed for the first time;
  # safe for further tags of the group.
  printA_header group ${g}

  # add lines corresponding to the tag
  echo "${blk[e]}" # the line with event:

  for(( i=e+1 ; i < sz ; ++i )) ; do
    words=( ${blk[i]} )

    # next event or end of last event
    test "${words[1]}" = 'event:' && return 0
    echo "${blk[i]}"
    test "${words[0]}" = 'status:' && return 0
  done

  return 1
}

clear_out()
{
  test ${isOut:-f} = t && return

  if [ ${countHeaderLines} -eq $( cat ${out} | wc -l ) \
      -o ! -s ${out} ] ; then
    \rm -f $out
  fi

  return
}

clearRedirection()
{
   test ${isOut:-f} = t && return

#   test ${#dir} -gt 0 && exec 1<&7 7<&-
   return
}

clearRedundantBlock()
{
  # remove all but the most recent unique entry

  local countLines
  local isFound=f
  local pattern

  local isInverse=t
  local isOldFile=t
  local dir=""
  local isOut=f

  local grepArg
  declare -a grepArg

  local out
  local IFS=''

  exec 7<&1

  for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
    f=${fs[i]##*/}

    exec 9<&0 # save stdin
    exec 0< ${path[i]}$f

    out="${path[i]}tmp_${f}"
    exec 1>$out

    # skip header
    countLines=0
    while read line ; do
      countLines=$(( countLines + 1 ))
      if [ ${isAddHeader} = t ] ; then
        echo "${line}"
      fi

      test "${line}" = 'items:' && break
    done

    countHeaderLines=$(( countLines - 1 ))

    local line
    unset blk

    # init reading of blocks
    read line
    blk[${#blk[*]}]=$line

    while read line ; do
      countLines=$(( countLines + 1 ))

      # read a block respecitvely an item
      if [ "${line:0:2}" = ' -' ] ; then
        # the end of a block
        if findRedundantBlocks ; then
          processBlock
          isFound=t
        fi

        unset blk
      fi

      blk[${#blk[*]}]=$line
    done

    # process the last block
    if findRedundantBlocks ; then
       processBlock
      isFound=t
    fi

    # remove empty output file or just containing the headline
    clear_out

    if [ -s "$out" -a ${isOldFile:-f} = t ] ; then
      if [ ${isFound} = t ] ; then
        mv $out ${path[i]}${f}
      else
        \rm -f $out
      fi
    fi

    # restore stdin and free #9
    exec 0<&9 9<&-
  done

  exec 1<&7 7<&-

  return
}

findAnnotatedBlock()
{
  # return 0 for a xtracting a block
  local i j tag tags
  declare -a tags

  # the last line belongs to the next block
  local sz=$(( ${#blk[*]} -1 ))

  # find all tags in the block
  for(( i=0 ; i < sz ; ++i )) ; do
    # skip spaces
    for(( j=0 ; j < ${#blk[i]} ; ++j )) ; do
      test "${blk[i]:j:1}" != ' ' && break
    done

    # find next tag
    if [ "${blk[i]:j:1}" = 't' -a "${blk[i]:j:4}" = 'tag:' ] ; then
      return 0
    fi
  done

  return 1
}

findExpFamily()
{
  local IFS=${oldIFS}

  # find exp families
  local fEF_aB=(${!2})

  fEF_aB=(${fEF_aB[*]#*_})

  local fEF_eF=( $( echo -e " ${fEF_aB[*]/%/\\n}" | sort -u) )
  local i fEF_eFC
  for(( i=0 ; i < ${#fEF_eF[*]} ; ++i )) ; do
    fEF_eFC[i]=$( echo -e " ${fEF_aB[*]/%/\\n}" | grep -c ${fEF_eF[i]} )
  done

  eval ${1}=\( ${fEF_eF[*]} \)
  eval ${1}Count=\( ${fEF_eFC[*]} \)

  return
}

findPureAtomic()
{
  # find pure atomic tags. If found, then remove them from the non-atomic tags

  local IFS=${oldIFS}

  local i j k ix ttags tag0 tag tags0 tags pureAtomicTags
  declare -a tags0
  declare -a tags
  declare -a pureAtomicTags

  local pAT
  declare -a pAT

  for(( ix=0 ; ix < ${#atomicBase[*]} ; ++ix )) ; do
    tags=( ${atomicTags[ix]//,/ } )
    tags0=( ${tags[0]//\// } )

    for tag0 in ${tags0[*]} ; do
      for((j=0 ; j < ${#tags[*]} ; ++j )) ; do
        test "${tags[j]}" = "${tags[j]/${tag0}/}" && continue 2
      done

      pureAtomicTags[ix]=${pureAtomicTags[ix]}${pureAtomicTags[ix]:+,}${tag0}
      atomicTags[ix]=${atomicTags[ix]//${tag0}/}
    done
  done

  unset ttags
  unset tags0

  # ensemble of atomic vars; either for all or for groups

  # array with all pure atomic tags
  for(( ix=0 ; ix < ${#atomicBase[*]} ; ++ix )) ; do
    tags=( ${pureAtomicTags[ix]//,/ } )

    for(( j=0 ; j < ${#tags[*]} ; ++j )) ; do
      for(( k=0 ; k < ${#grpPAT[*]} ; ++k )) ; do
        test ${tags[j]} = ${grpPAT[k]} && continue 2
      done

      grpPAT[${#grpPAT[*]}]=${tags[j]}
    done
  done

  # remove identical ones
  grpPAT=( $( echo -e " ${grpPAT[*]/%/\\n}" | sort -u) )

  # tag <-> atomicBase relations
  local N=${#grpPAT[*]}

  for(( i=0 ; i < N ; ++i )) ; do

    # each tag gets indices of corresponding atomicBase names
    for(( ix=0 ; ix < ${#atomicBase[*]} ; ++ix )) ; do
      tags=( ${pureAtomicTags[ix]//,/ } )

      for(( j=0 ; j < ${#tags[*]} ; ++j )) ; do
        if [ ${tags[j]} = ${grpPAT[i]} ] ; then
          grpPAT_bix[i]=${grpPAT_bix[i]}${grpPAT_bix[i]:+,}${ix}
        fi
      done
    done

  done

  unset pureAtomicTags

  # find super groups
  local is=f
  local S=0
  local sgrpPAT_bix sgrpPAT
  declare -a sgrpPAT_bix
  declare -a sgrpPAT

  for(( i=0 ; i < N ; ++i )) ; do
    for(( k=0 ; k < S ; ++k )) ; do
      test ${grpPAT} = ${sgrpPAT[k]} && break
    done

    if [ $k -lt $S ] ; then
      sgrpPAT[k]=${sgrpPAT[k]},${grpPAT[i]}
    else
      sgrpPAT_bix[S]=${grpPAT_bix[i]}
      sgrpPAT[S]=${grpPAT[i]}
      S=$(( S+1 ))
    fi

    for(( j=i+1 ; j < N ; ++j )) ; do
      if [ ${grpPAT_bix[i]} = ${grpPAT_bix[j]} ] ; then
        sgrpPAT[k]=${sgrpPAT[k]},${grpPAT[j]}
        is=t
        unset grpPAT[j]
        unset grpPAT_bix[j]
      fi
    done

    if [ $is = t ] ; then
      grpPAT_bix=( ${grpPAT_bix[*]} )
      grpPAT=( ${grpPAT[*]} )
      N=${#grpPAT[*]}
      is=f
    fi
  done

  grpPAT_bix=( ${sgrpPAT_bix[*]} )
  grpPAT=( ${sgrpPAT[*]} )

  unset sgrpPAT
  unset sgrpPAT_bix

  return
}

findRedundantBlocks()
{
  # find redundant entries in terms of full file name
  local i j last matches pattern
  local is=t
  declare -a matches

  # the last line belongs to the next block
  local sz=$(( ${#blk[*]} -1 ))

  # find all tags in the block
  for(( i=0 ; i < sz ; ++i )) ; do
    # skip spaces
    for(( j=0 ; j < ${#blk[i]} ; ++j )) ; do
      test "${blk[i]:j:1}" != ' ' && break
    done

    # find file:
    if [ "${blk[i]:j:1}" = 'f' -a "${blk[i]:j:5}" = 'file:' ] ; then
      pattern=${blk[i]:$((j+6))}
      is=f
      break
    fi
  done
  test $is = t && return 0 # this block has no file: item

  local IFS=$oldIFS

  # note: first array item of pattern is FILE:
  matches=($(grep -n "[[:space:]]*file:[[:space:]]*${pattern}" ${path}${f} ))

  # a unique block is represented by three matches per line
  test ${#matches[*]} -eq 3 && return 0

  last=${matches[$(( ${#matches[*]} - 3 ))]}
  last=${last%:}

  if [ ${last} -gt ${countLines} ] ; then
    return 1
  else
    return 0
  fi
}

getByToken()
{
  local is isNoFlag

  for token in ${tokens[*]} ; do
    ts=( ${token//,/ } )

    set -f
    if [ ${#ts[*]} -eq 1 ] ; then
      t=*${token}*
    else
      t=*
      for(( i=0 ; i < ${#ts[*]} ; ++i )) ; do
        t=${t}${ts[i]}*
      done
    fi
    set +f

    fs=( $( ls -d ${t}.log ) )

    xtrctAnnotated
  done

  return
}

getVarTag()
{
#  toggleX

  local sz=${#blk[*]}
  local tag=$1
  local tag_ix=$2
  local capt_ix=$(( tag_ix - 2 ))

  local x_tag

  x_tag=( ${blk[tag_ix]} )

  # skip variable tail always indicated by ','
  local capt="${blk[capt_ix]%%,*}"

  # skip '   caption: '
  capt=${capt#*: }

  # skip tails from first occurrence of ': '
#  capt=${capt%%: *}

  # skip sub-strings in <> bracketes
#  capt="${capt//\<*\>/}"

  # skip leading spaces
#  for(( j=0 ; j < ${#capt} ; ++j )) ; do
#    test "${blk[capt_ix]:j:1}" != ' ' && break
#  done

  capt=$( echo "${capt}" | sha1sum | awk '{print $1}' )

#  toggleX

  eval ${1}=${x_tag[1]}=${capt}

  return
}

grepBlock()
{
  test ${isOut:-f} = f && exec 7<&1

  for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
    f=${fs[i]##*/}

    if [ ${#dir} -gt 0 ] ; then
        out="${dir}${f%.log}.note"
    else
      test ${#path[i]} -gt 0 && mkdir -p ${path[i]}
    fi

#    if [ ${isOut:-f} = f ] ; then
#      out="${dir}${f%.log}.note"
#    fi

#    if [ ${isOldFile:-f} = t ] ; then
#      out="${path}tmp_${f}"
#    fi

    test ${#out} -gt 0 && exec 1>$out

    exec 9<&0 # save stdin
    exec 0< ${path}$f

    # skip header
    read line
    if [ "${line:0:5}" = '# Log' ] ; then
      while read line ; do
        test "${line}" = 'items:' && break
      done
    else
      blk[${#blk[*]}]=$line
    fi

    IFS=''

    while read line ; do
      if [ "${line:0:8}" = ' - date:' ] ; then
        # the end of a block
        processBlock

        unset blk
      fi
      blk[${#blk[*]}]="$line"
    done

    # remove empty output file or just containing the headline
    clear_out

    if [ ${isOldFile:-f} = t ] ; then
      if [ -s ${out} ] ; then
        mv $out ${path}${f}
      elif [ ${isOldFile:-f} = t ] ; then
        test ${isInverse} = t && \rm ${path}${f}
        # try to remove an empty dir
        rmdir ${path} &> /dev/null
      fi
    fi

    # restore stdin and free #9
    exec 0<&9 9<&-
  done

  test ${isOut:-f} = f && exec 1<&7 7<&-
  return
}

onExit()
{
  clearRedirection
}

printAnnotations()
{
  local k line
  local blk
  declare -a blk

  local IFS=''

  #note that there is no header
  read line
  blk[${#blk[*]}]="$line"

  while read line ; do
    if [ "${line:0:8}" = ' - date:' ] ; then
      printA_blk
      unset blk
    fi

    blk[${#blk[*]}]=$line
  done

  # the last block
  printA_blk
  unset blk

  return
}

printA_blk()
{
  local IFS=${oldIFS}

  local i ix N gi
  local fName
  local file_ix=-1
  local end_ix=-1
  local events_ix=-1

  local ev_ix event_ix
  declare -a event_ix

  local words
  declare -a words

  local sz=${#blk[*]}

  local isHeader=f

  for(( i=0 ; i < sz ; ++i )) ; do
    # skip leading spaces
    for(( j=0 ; j < ${#blk[i]} ; ++j )) ; do
      test "${blk[i]:j:1}" != ' ' && break
    done

    # find next file
    if [ "${blk[i]:j:1}" = 'f' -a "${blk[i]:j:5}" = 'file:' ] ; then
      words=( ${blk[i]} )
      fName=${words[1]}
      file_ix=$i
    elif [ "${blk[i]:j:1}" = 'e' ] ; then
      if [ "${blk[i]:j:4}" = 'end:' ] ; then
        end_ix=$i
      elif [ "${blk[i]:j:7}" = 'events:' ] ; then
        events_ix=$i
      fi
    elif [ "${blk[i]:j:8}" = '- event:' ] ; then
      event_ix[${#event_ix[*]}]=$i
    fi
  done

  # not a usual block, e.g. qa_version
  test ${i} -eq ${sz} -a ${file_ix} -eq -1 && return

  # print for a matching tags
  printA_groupTag

  printA_fileTag

  return
}

printA_fileTag()
{
  local e i j
  local varTag
  local szA szAB

  local words
  declare -a words

  isHeader=f

  # look for a matching base
   szAB=${#atomicBase[*]}
  for(( ix=0 ; ix < szAB ; ++ix )) ; do
    szA=${#atomicBase[ix]}
    test "${fName:0:szA}" = "${atomicBase[ix]}" && break
  done

  for(( j=0 ; j < ${#event_ix[*]} ; ++j )) ; do
    test ! ${event_ix[j]} && continue

    e=${event_ix[j]}
    i=$((e+3))  # index of tag:
    words=( ${blk[i]} )

    if [ "${words[0]}" = 'tag:' ] ; then
      getVarTag varTag $i

      if checkSolvedGroupTags ${varTag} 0 ${#grpPAT[*]} ; then
        continue
      fi

      printA_header # safe when already done

      echo "${blk[e]}" # the line with event:

      for(( j=0 ; j < ${#event_ix[*]} ; ++j )) ; do
        test ! ${event_ix[j]} && continue

        e=${event_ix[j]}
        i=$((e+3))  # index of tag:
        words=( ${blk[i]} )

        for(( i=e+1 ; i < sz ; ++i )) ; do
          words=( ${blk[i]} )

          # next event or end of last event
          test "${words[1]}" = 'event:' && break
          echo "${blk[i]}"
          test "${words[0]}" = 'status:' && return
        done
      done

    fi
  done

  return
}

printA_groupTag()
{
  local ev_ix e i g
  local varTag

  local words
  declare -a words

  for(( g=0 ; g < ${#grpPAT[*]} ; ++g )) ; do
    isHeader=f

    for(( ev_ix=0 ; ev_ix < ${#event_ix[*]} ; ++ev_ix )) ; do
      e=${event_ix[ev_ix]}
      i=$((e+3))  # index of tag:
      words=( ${blk[i]} )

      if [ "${words[0]}" = 'tag:' ] ; then
        getVarTag varTag $i

        checkSolvedGroupTags $varTag $g $((g+1))
      fi
    done

  done

  return
}

printA_header()
{
  test ${isHeader:-f} = t && return 1

  local i j sz

  sz=$(( events_ix + 1 ))

  if [ "$1" = group ] ; then
    local b_ix
    declare -a b_ix
    b_ix=( ${grpPAT_bix[${2}]//,/ } )
  fi

  for(( i=0 ; i < sz ; ++i )) ; do
    if [ "$1" = group ] ; then
      if [ $i -eq ${file_ix} ] ; then
        local aB aBC coll k m exps
        declare -a exps

        for(( j=0 ; j < ${#b_ix[*]} ; ++j )) ; do
          coll[j]=${atomicBase[${b_ix[j]}]}
        done

        findExpFamily aB coll[*]

        # does the number of bases in a family equal that of the entire set?
        for(( j=0 ; j < ${#aB[*]} ; ++j )) ; do
           for(( k=0 ; k < ${#expFamily[*]} ; ++k )) ; do
             if [ ${aB[j]} = ${expFamily[k]} ] ; then
                if [ ${aBCount[j]} -eq ${expFamilyCount[k]} ] ; then
                  for(( m=0 ; m < ${#coll[*]} ; ++m )) ; do
                    if [ ${coll[m]#*_} = ${aB[j]} ] ; then
                       coll[m]=
                    fi
                  done

                  exps[${#exps[*]}]=${aB[j]}
                  coll=(${coll[*]})
                  break
                fi
             fi
           done
        done

        if [ "${exps}" ] ; then
          echo "   experiment:"

          for(( j=0 ; j < ${#exps[*]} ; ++j )) ; do
            echo "    - ${exps[j]}"
          done
        fi

        if [ "${coll}" ] ; then
          echo "   variable:"

          for(( j=0 ; j < ${#coll[*]} ; ++j )) ; do
            echo "    - ${coll[j]}"
          done
        fi

        #adjust the path: remove the trailing varName-directory
#         local atomicBaseSet
#         declare -a atomicBaseSet
#         for(( j=0 ; j < ${#b_ix[*]} ; ++j )) ; do
#           atomicBaseSet[j]=${atomicBase[${b_ix[j]}]}
#         done

#         splitAtomicBase

        # work-around due to a particular machine
        i=$((i+1))
        echo "${blk[i]%/*/*}" # data_path
        i=$((i+1))
        echo "${blk[i]%/*/*}" # result_path

        continue
      elif [ $i -eq ${end_ix} ] ; then
        echo "    end: ${atomicEnd[ix]}"
        continue
      fi
    fi

    echo "${blk[i]}"
  done

  isHeader=t
  return 0
}

processBlock()
{
  local i
  local pr=f
  local gA
  local count=0

  # the last line belongs to the next block
  local sz=${#blk[*]}

  # grep blocks
  if [ ${#grepArg[*]} -gt 0 ] ; then
    for(( i=0 ; i < sz ; ++i )) ; do
      count=$(( count + 1 ))
      if [ $isSearchLine = t ] ; then
         test $count != $searchLine && continue
      fi

      # find blocks containing a specified string
      for gA in ${grepArg[*]} ; do
        if expr match "${blk[i]}" ".*$gA" &> /dev/null ; then
          pr=t
          break 2
        fi
      done
    done

    if ! ( [ ${isInverse} = f -a $pr = t ]     ||
              [ ${isInverse} = t -a $pr = f  ]    ) ; then
       return
    fi
  fi

  # xtract notes
  local txt
  for(( i=0 ; i < sz ; ++i )) ; do
    txt="${txt}${blk[i]}\n"
  done
  echo -e "${txt}"

  return
}

splitAtomicBase()
{
  # Find overall matching part. Assumption: separator '_'
  # and names of the same number of items.

  # Additionally, put the variable tail to baseTail

  local i ix beg end sz
  local p0 p1 len0 len1
  local items0 items1
  declare -a items0
  declare -a items1

  splitString items0 ${atomicBaseSet[0]} '_'

  beg=0
  end=$(( ${#items0[*]} - 1 ))
  sz=$end

  for((ix=1 ; ix < ${#atomicBaseSet[*]} ; ++ix )) ; do
      splitString items1 ${atomicBaseSet[ix]} '_'

    len0=${#atomicBaseSet[0]}
    len1=${#atomicBaseSet[ix]}
    p0=0
    p1=0

    for((i=0 ; i < sz ; ++i )) ; do
      if [ $i -lt $beg ] ; then
        p0=$(( p0 + ${#item0[i]} + 1))
        p1=$(( p1 + ${#item1[i]} + 1))

        len0=$p0
        len1=$p1
      elif [ $i -lt $end ] ; then
        len0=$(( len0 + ${#item0[i]} + 1))
        len1=$(( len1 + ${#item1[i]} + 1))
      fi
    done

    if [ ${atomicBaseSet[0]:p0:len0} != ${atomicBaseSet[ix]:p1:len1} ] ; then
      for(( i=0 ; i < sz ; ++i )) ; do
        if [ ${items0[i]} = ${items1[i]} ] ; then
          test ${beg} -lt ${i} && beg=$i
          break
        fi
      done

      for(( i=sz ; i > -1 ; --i )) ; do
        if [ ${items0[i]} = ${items1[i]} ] ; then
          test ${end} -gt ${i} && end=$i
          break
        fi
      done
    fi
  done

  for(( i=beg ; i <= end ; ++i )) ; do
    comnName=${comnName}${comnName:+_}${items0[i]}
  done

  # now split
  for((ix=0 ; ix < ${#atomicBaseSet[*]} ; ++ix )) ; do
    baseFN[ix]=${atomicBaseSet[ix]%_${comnName}*}
    baseTail[ix]=${atomicBaseSet[ix]#*_${comnName}_}
  done

  return
}

splitString()
{
#  toggleX

  # split a string at given separator
  local sep

  if [ "${3}" ] ; then
    sep=${3}
  else
    sep=' '
  fi

  local p0 p1 vals
  declare -a vals

  local str="${2}"
  p0=0

  for((p0=0 ; p0 < ${#str} ; ++p0 )) ; do
    test "${str:p0:1}" != "${sep}" && break
  done

  for((p1=p0+1 ; p1 < ${#str} ; ++p1 )) ; do
    if [ "${str:p1:1}" = "${sep}" ] ; then
       vals[${#vals[*]}]=${str:p0:$((p1-p0))}

       for((p0=p1+1 ; p0 < ${#str} ; ++p0 )) ; do
         if [ "${str:p0:1}" != "${sep}" ] ; then
           p1=$((p0+1))
           break
         fi
       done
    fi
  done
  test $((p0+1)) -lt $p1 && vals[${#vals[*]}]=${str:p0:$((p1-p0))}

  # a '#' could harm, but that is not looked for
  eval ${1}=\( ${vals[*]} \) 2> /dev/null

#  toggleX
  return
}

toggleX()
{
  # toggle between set -x and set +x in a way that
  # restores the original setting after calling twice

  if [ ${isSetX:-t} = t ] ; then
    test "$(set -o |grep xtrace | awk '{print $2}')" = off && return

    # first call
    isSetX=on
  fi

  # restore previous setting
  if [ ${isSetX} = off ] ; then
    set -x
    isSetX=on
  else
    set +x
    isSetX=off
  fi

  return
}

xtrctAnnotated()
{
  local blk
  declare -a blk

  local file i line

  # save stdin
  exec 9<&0 # save stdin

  for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
    file=${fs[i]##*/}

    if [ ${#dir} -gt 0 ] ; then
      mkdir -p ${path[i]}${dir}annot
      mkdir -p ${path[i]}${dir}head

      head="${path[i]}${dir}head/${file%.log}.head"
      annot="${path[i]}${dir}annot/${file%.log}.annot"
      atom="${path[i]}${dir}annot/${file%.log}.atom"
      finA="${path[i]}${dir}${file%.log}.note"
    fi

    test "${file##*.}" != log && continue

    exec 0< ${path[i]}$file
    exec 1> $annot

    # reset file
    echo -n ''

    local IFS=''

    unset blk
    unset atomicBase atomicTags atomicEnd
    unset baseFN baseTail
    unset grpPAT grpPAT_bix
    unset solvedPAT

    #read file header
    while read line ; do
      if [ "${line:0:8}" = ' - date:' ] ; then
        # init reading of blocks
        blk[${#blk[*]}]="$line"
        break
      fi

      echo "${line}" >> $head
    done

    local isSound

    while read line ; do
      if [ "${line:0:8}" = ' - date:' ] ; then
        # the end of a block
        if findAnnotatedBlock ; then
          processBlock
          isSound=f
        else
          isSound=t
        fi

        atomicParsing_blk $isSound

        unset blk
      fi
      blk[${#blk[*]}]="$line"
    done

    # last block
    if findAnnotatedBlock ; then
      processBlock
      isSound=f
    else
      isSound=t
    fi
    atomicParsing_blk $isSound

    atomise

    if [ -s $atom ] ; then
      mv $head $finA
      cat $atom >> $finA
    fi
  done

  \rm -r $head 2> /dev/null
  \rm -r $annot 2> /dev/null
  \rm -r $atom 2> /dev/null

  rmdir ${path[i]}${dir}head &> /dev/null
  rmdir ${path[i]}${dir}annot &> /dev/null
  rmdir ${path[i]}${dir} &> /dev/null

  # restore stdin and free #9
  exec 0<&9 9<&-

  IFS=$oldIFS

  return
}

# -------  main -----
test $# -eq 0 && descript

trap onExit EXIT

isInternalExclude=f
isOut=f
dir=Annotations/
isInverse=f
isClearRedundant=f
isSearchLine=f
isAddHeader=f

while getopts cd:f:g:hHim:pr:st:-: option ${args[*]}
do
  case $option in
    c)  isClearRedundant=t
        ;;
    d)  dir=${OPTARG}/ ;;
    f)  flags=( ${flags[*]} ${OPTARG//,/ } ) ;;
    g)  grepArg=( ${OPTARG//,/ } )
        unset dir ;;
    H)  isAddHeader=t ;;
    h)  descript ;;
    i)  isInverse=t ;;
    m)  MERGE=${OPTARG}
        isClearRedundant=t
        ;;
    p)  dir="" ;;
    r)  isInverse=t
        grepArg=( ${OPTARG//,/ } )
        isOldFile=t
        dir=""
        ;;
    s)  isOut=t ;;
    t)  tokens=( ${tokens[*]} ${OPTARG} ) ;;
    -)  if [ "$OPTARG" = "help" ] ; then
           descript
        elif [ "${OPTARG%%=*}" = "debug" ] ; then
           this=${0##*/}
           test "${OPTARG}" = debug -o ${OPTARG##*=} = ${this} && set -x
        elif [ "${OPTARG:0:4}" = line ] ; then
           searchLine=${OPTARG:5}
           isSearchLine=t
        fi
        ;;
   \?)  descript
  esac
done

shift $(( $OPTIND - 1 ))

declare -a blk

path=

# given files
if [ $# -gt 0 ] ; then
  fs=( $* )
  for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
    if [ ${fs[i]} != ${fs[i]##*/} ] ; then
       path[$i]=${fs[i]%/*}
       test ${#path[i]} -gt 0 && path[$i]=${path[i]}/
    else
       path[$i]=''
    fi

    test ${#dir} -gt 0 && mkdir -p ${path[i]}$dir
  done
fi

oldIFS="${IFS}"

if [ ${#fs[*]} -eq 0 -a ${#tokens[*]} -gt 0 ] ; then
  for t in ${tokens[*]//,/_} ; do
    fs[${#fs[*]}]=$( ls *$t*.log )
  done
fi

if [ ${#MERGE} -gt 0 ] ; then
  sed -i '1,/items:/ d' ${MERGE}.log
  cat $MERGE.log >> ${fs[0]}
  test $? -eq 0 && \rm -f $MERGE.log
fi

clearRedundantBlock
test ${isClearRedundant} = t && exit

if [ ${#grepArg[*]} -gt 0 ] ; then
   grepBlock
   exit
fi

if [ ${#tokens[*]} -gt 0 ] ; then
  # token can be defined in different files
  getByToken
  exit
fi

xtrctAnnotated
